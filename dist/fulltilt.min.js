(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["FULLTILT"] = factory();
	else
		root["FULLTILT"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DeviceMotion.ts":
/*!*****************************!*\
  !*** ./src/DeviceMotion.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DeviceMotion": () => (/* binding */ DeviceMotion)
/* harmony export */ });
/* harmony import */ var _WindowConstants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WindowConstants */ "./src/WindowConstants.ts");
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Events */ "./src/Events.ts");


var DeviceMotion = /** @class */ (function () {
    function DeviceMotion(options) {
        // placeholder object since no options are currently supported
        this.options = options || {};
    }
    DeviceMotion.prototype.start = function (callback) {
        if (callback &&
            Object.prototype.toString.call(callback) == "[object Function]") {
            _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.callbacks.push(callback);
        }
        if (!_WindowConstants__WEBPACK_IMPORTED_MODULE_0__.screenActive) {
            (0,_Events__WEBPACK_IMPORTED_MODULE_1__.registerForScreenOrientationChange)();
        }
        if (!_Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.active) {
            window.addEventListener("devicemotion", _Events__WEBPACK_IMPORTED_MODULE_1__.handleDeviceMotionChange, false);
            _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.active = true;
        }
    };
    DeviceMotion.prototype.stop = function () {
        if (_Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.active) {
            window.removeEventListener("devicemotion", _Events__WEBPACK_IMPORTED_MODULE_1__.handleDeviceMotionChange, false);
            _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.active = false;
        }
    };
    DeviceMotion.prototype.listen = function (callback) {
        this.start(callback);
    };
    DeviceMotion.prototype.getScreenAdjustedAcceleration = function () {
        var accData = _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data && _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data.acceleration
            ? _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data.acceleration
            : { x: 0, y: 0, z: 0 };
        var screenAccData = { x: 0, y: 0, z: 0 };
        switch (_WindowConstants__WEBPACK_IMPORTED_MODULE_0__.screenOrientation.angle) {
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_90:
                screenAccData.x = -accData.y;
                screenAccData.y = accData.x;
                break;
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_180:
                screenAccData.x = -accData.x;
                screenAccData.y = -accData.y;
                break;
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_270:
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_MINUS_90:
                screenAccData.x = accData.y;
                screenAccData.y = -accData.x;
                break;
            default: // SCREEN_ROTATION_0
                screenAccData.x = accData.x;
                screenAccData.y = accData.y;
                break;
        }
        screenAccData.z = accData.z;
        return screenAccData;
    };
    DeviceMotion.prototype.getScreenAdjustedAccelerationIncludingGravity = function () {
        var accGData = _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data && _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data.accelerationIncludingGravity
            ? _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data.accelerationIncludingGravity
            : { x: 0, y: 0, z: 0 };
        var screenAccGData = { x: 0, y: 0, z: 0 };
        switch (_WindowConstants__WEBPACK_IMPORTED_MODULE_0__.screenOrientation.angle) {
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_90:
                screenAccGData.x = -accGData.y;
                screenAccGData.y = accGData.x;
                break;
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_180:
                screenAccGData.x = -accGData.x;
                screenAccGData.y = -accGData.y;
                break;
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_270:
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_MINUS_90:
                screenAccGData.x = accGData.y;
                screenAccGData.y = -accGData.x;
                break;
            default: // SCREEN_ROTATION_0
                screenAccGData.x = accGData.x;
                screenAccGData.y = accGData.y;
                break;
        }
        screenAccGData.z = accGData.z;
        return screenAccGData;
    };
    DeviceMotion.prototype.getScreenAdjustedRotationRate = function () {
        var rotRateData = _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data && _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data.rotationRate
            ? _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data.rotationRate
            : { alpha: 0, beta: 0, gamma: 0 };
        var screenRotRateData = { alpha: 0, beta: 0, gamma: 0 };
        switch (_WindowConstants__WEBPACK_IMPORTED_MODULE_0__.screenOrientation.angle) {
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_90:
                screenRotRateData.beta = -rotRateData.gamma;
                screenRotRateData.gamma = rotRateData.beta;
                break;
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_180:
                screenRotRateData.beta = -rotRateData.beta;
                screenRotRateData.gamma = -rotRateData.gamma;
                break;
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_270:
            case _WindowConstants__WEBPACK_IMPORTED_MODULE_0__.SCREEN_ROTATION_MINUS_90:
                screenRotRateData.beta = rotRateData.gamma;
                screenRotRateData.gamma = -rotRateData.beta;
                break;
            default: // SCREEN_ROTATION_0
                screenRotRateData.beta = rotRateData.beta;
                screenRotRateData.gamma = rotRateData.gamma;
                break;
        }
        screenRotRateData.alpha = rotRateData.alpha;
        return screenRotRateData;
    };
    DeviceMotion.prototype.getLastRawEventData = function () {
        return _Events__WEBPACK_IMPORTED_MODULE_1__.sensors.motion.data || {};
    };
    return DeviceMotion;
}());



/***/ }),

/***/ "./src/DeviceOrientation.ts":
/*!**********************************!*\
  !*** ./src/DeviceOrientation.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Rotation_Angle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Rotation/Angle */ "./src/Rotation/Angle.ts");
/* harmony import */ var _Rotation_Euler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Rotation/Euler */ "./src/Rotation/Euler.ts");
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Events */ "./src/Events.ts");
/* harmony import */ var _WindowConstants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WindowConstants */ "./src/WindowConstants.ts");




var DeviceOrientation = /** @class */ (function () {
    function DeviceOrientation(options) {
        this.options = options || {}; // by default use UA deviceorientation 'type' ("game" on iOS, "world" on Android)
        this.alphaOffsetScreen = 0;
        this.alphaOffsetDevice = undefined;
        var tries = 0;
        var successCount = 0;
        var maxTries = 200;
        var successThreshold = 10;
        // Create a game-based deviceorientation object (initial alpha === 0 degrees)
        if (this.options.type === "game") {
            var setGameAlphaOffset_1 = function (evt) {
                if (evt.alpha !== null) {
                    // do regardless of whether 'evt.absolute' is also true
                    this.alphaOffsetDevice = new _Rotation_Euler__WEBPACK_IMPORTED_MODULE_1__["default"](evt.alpha, 0, 0);
                    this.alphaOffsetDevice.rotateZ(-_WindowConstants__WEBPACK_IMPORTED_MODULE_3__.screenOrientation.angle);
                    // Discard first {successThreshold} responses while a better compass lock is found by UA
                    if (++successCount >= successThreshold) {
                        window.removeEventListener("deviceorientation", setGameAlphaOffset_1, false);
                        return;
                    }
                }
                if (++tries >= maxTries) {
                    window.removeEventListener("deviceorientation", setGameAlphaOffset_1, false);
                }
            }.bind(this);
            window.addEventListener("deviceorientation", setGameAlphaOffset_1, false);
            // Create a compass-based deviceorientation object (initial alpha === compass degrees)
        }
        else if (this.options.type === "world") {
            var setCompassAlphaOffset_1 = function (evt) {
                if (evt.absolute !== true &&
                    evt.webkitCompassAccuracy !== undefined &&
                    evt.webkitCompassAccuracy !== null &&
                    +evt.webkitCompassAccuracy >= 0 &&
                    +evt.webkitCompassAccuracy < 50) {
                    this.alphaOffsetDevice = new _Rotation_Euler__WEBPACK_IMPORTED_MODULE_1__["default"](evt.webkitCompassHeading, 0, 0);
                    this.alphaOffsetDevice.rotateZ(_WindowConstants__WEBPACK_IMPORTED_MODULE_3__.screenOrientation.angle);
                    this.alphaOffsetScreen = _WindowConstants__WEBPACK_IMPORTED_MODULE_3__.screenOrientation.angle;
                    // Discard first {successThreshold} responses while a better compass lock is found by UA
                    if (++successCount >= successThreshold) {
                        window.removeEventListener("deviceorientation", setCompassAlphaOffset_1, false);
                        return;
                    }
                }
                if (++tries >= maxTries) {
                    window.removeEventListener("deviceorientation", setCompassAlphaOffset_1, false);
                }
            }.bind(this);
            window.addEventListener("deviceorientation", setCompassAlphaOffset_1, false);
        } // else... use whatever orientation system the UA provides ("game" on iOS, "world" on Android)
    }
    DeviceOrientation.prototype.start = function (callback) {
        (0,_Events__WEBPACK_IMPORTED_MODULE_2__.addOrientationCallback)(callback);
        (0,_Events__WEBPACK_IMPORTED_MODULE_2__.registerForScreenOrientationChange)();
        (0,_Events__WEBPACK_IMPORTED_MODULE_2__.startDeviceOrientationMonitoring)();
    };
    DeviceOrientation.prototype.stop = function () {
        (0,_Events__WEBPACK_IMPORTED_MODULE_2__.stopDeviceOrientationMonitoring)();
    };
    DeviceOrientation.prototype.listen = function (callback) {
        this.start(callback);
    };
    DeviceOrientation.prototype.getFixedFrameQuaternion = function () {
        return this.getFixedFrameEuler().toQuaternion();
    };
    // TODO: Simplify
    DeviceOrientation.prototype.getFixedFrameEuler = function () {
        var orientationData = _Events__WEBPACK_IMPORTED_MODULE_2__.sensors.orientation.data || {
            alpha: 0,
            beta: 0,
            gamma: 0,
        };
        var adjustedAlpha = orientationData.alpha;
        if (this.alphaOffsetDevice) {
            var matrix = this.alphaOffsetDevice
                .toMatrix()
                .rotateZ((0,_Rotation_Angle__WEBPACK_IMPORTED_MODULE_0__.radians)(-this.alphaOffsetScreen));
            var tempeuler = matrix.toEuler();
            adjustedAlpha -= tempeuler.alpha;
            return new _Rotation_Euler__WEBPACK_IMPORTED_MODULE_1__["default"](adjustedAlpha, orientationData.beta, orientationData.gamma);
        }
        else {
            return (0,_Rotation_Euler__WEBPACK_IMPORTED_MODULE_1__.eulerFromAngleObject)(orientationData);
        }
    };
    DeviceOrientation.prototype.getScreenAdjustedQuaternion = function () {
        return this.getFixedFrameQuaternion().rotateZ((0,_Rotation_Angle__WEBPACK_IMPORTED_MODULE_0__.radians)(-_WindowConstants__WEBPACK_IMPORTED_MODULE_3__.screenOrientation.angle));
    };
    DeviceOrientation.prototype.getFixedFrameMatrix = function () {
        return this.getFixedFrameEuler().toMatrix();
    };
    DeviceOrientation.prototype.getScreenAdjustedMatrix = function () {
        return this.getFixedFrameMatrix().rotateZ((0,_Rotation_Angle__WEBPACK_IMPORTED_MODULE_0__.radians)(-_WindowConstants__WEBPACK_IMPORTED_MODULE_3__.screenOrientation.angle));
    };
    DeviceOrientation.prototype.getScreenAdjustedEuler = function () {
        return this.getScreenAdjustedMatrix().toEuler();
    };
    DeviceOrientation.prototype.isAbsolute = function () {
        if (_Events__WEBPACK_IMPORTED_MODULE_2__.sensors.orientation.data &&
            _Events__WEBPACK_IMPORTED_MODULE_2__.sensors.orientation.data.absolute === true) {
            return true;
        }
        return false;
    };
    DeviceOrientation.prototype.getLastRawEventData = function () {
        return _Events__WEBPACK_IMPORTED_MODULE_2__.sensors.orientation.data || {};
    };
    return DeviceOrientation;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DeviceOrientation);


/***/ }),

/***/ "./src/Events.ts":
/*!***********************!*\
  !*** ./src/Events.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addOrientationCallback": () => (/* binding */ addOrientationCallback),
/* harmony export */   "handleDeviceMotionChange": () => (/* binding */ handleDeviceMotionChange),
/* harmony export */   "handleDeviceOrientationChange": () => (/* binding */ handleDeviceOrientationChange),
/* harmony export */   "registerForScreenOrientationChange": () => (/* binding */ registerForScreenOrientationChange),
/* harmony export */   "sensors": () => (/* binding */ sensors),
/* harmony export */   "startDeviceOrientationMonitoring": () => (/* binding */ startDeviceOrientationMonitoring),
/* harmony export */   "stopDeviceOrientationMonitoring": () => (/* binding */ stopDeviceOrientationMonitoring)
/* harmony export */ });
/* harmony import */ var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math */ "./src/Math.ts");
/* harmony import */ var _WindowConstants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WindowConstants */ "./src/WindowConstants.ts");
////// Internal Event Handlers //////


// Internal device orientation + motion variables
var sensors = {
    orientation: {
        active: false,
        callbacks: [],
        data: undefined,
    },
    motion: {
        active: false,
        callbacks: [],
        data: undefined,
    },
};
function registerForScreenOrientationChange() {
    if (_WindowConstants__WEBPACK_IMPORTED_MODULE_1__.screenActive)
        return;
    if (_WindowConstants__WEBPACK_IMPORTED_MODULE_1__.hasScreenOrientationAPI) {
        window.screen.orientation.addEventListener("change", function () {
            return (_WindowConstants__WEBPACK_IMPORTED_MODULE_1__.screenOrientation.angle =
                (window.screen.orientation.angle || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad);
        }, false);
    }
    else {
        window.addEventListener("orientationchange", function () { return (_WindowConstants__WEBPACK_IMPORTED_MODULE_1__.screenOrientation.angle = (window.orientation || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad); }, false);
    }
}
function addOrientationCallback(callback) {
    if (callback &&
        Object.prototype.toString.call(callback) == "[object Function]") {
        sensors.orientation.callbacks.push(callback);
    }
}
function startDeviceOrientationMonitoring() {
    if (!sensors.orientation.active) {
        window.addEventListener("deviceorientation", handleDeviceOrientationChange, false);
        sensors.orientation.active = true;
    }
}
function stopDeviceOrientationMonitoring() {
    if (sensors.orientation.active) {
        window.removeEventListener("deviceorientation", handleDeviceOrientationChange, false);
        sensors.orientation.active = false;
    }
}
function handleDeviceOrientationChange(event) {
    sensors.orientation.data = event;
    // Fire every callback function each time deviceorientation is updated
    for (var i in sensors.orientation.callbacks) {
        sensors.orientation.callbacks[i].call(this);
    }
}
function handleDeviceMotionChange(event) {
    sensors.motion.data = event;
    // Fire every callback function each time devicemotion is updated
    for (var i in sensors.motion.callbacks) {
        sensors.motion.callbacks[i].call(this);
    }
}


/***/ }),

/***/ "./src/Math.ts":
/*!*********************!*\
  !*** ./src/Math.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M_2_PI": () => (/* binding */ M_2_PI),
/* harmony export */   "M_PI": () => (/* binding */ M_PI),
/* harmony export */   "M_PI_2": () => (/* binding */ M_PI_2),
/* harmony export */   "abs": () => (/* binding */ abs),
/* harmony export */   "asin": () => (/* binding */ asin),
/* harmony export */   "atan2": () => (/* binding */ atan2),
/* harmony export */   "degToRad": () => (/* binding */ degToRad),
/* harmony export */   "radToDeg": () => (/* binding */ radToDeg)
/* harmony export */ });
var M_PI = Math.PI;
var M_PI_2 = M_PI / 2;
var M_2_PI = 2 * M_PI;
// Degree to Radian conversion
var degToRad = M_PI / 180;
var radToDeg = 180 / M_PI;
var atan2 = Math.atan2;
var asin = Math.asin;
var abs = Math.abs;


/***/ }),

/***/ "./src/Rotation/Angle.ts":
/*!*******************************!*\
  !*** ./src/Rotation/Angle.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Angle": () => (/* binding */ Angle),
/* harmony export */   "degrees": () => (/* binding */ degrees),
/* harmony export */   "radians": () => (/* binding */ radians)
/* harmony export */ });
/* harmony import */ var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Math */ "./src/Math.ts");

var Angle = /** @class */ (function () {
    function Angle(angleSpec) {
        if ("degrees" in angleSpec) {
            this.degrees = angleSpec.degrees;
            this.radians = angleSpec.degrees * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
        }
        else {
            this.degrees = angleSpec.radians * _Math__WEBPACK_IMPORTED_MODULE_0__.radToDeg;
            this.radians = angleSpec.radians;
        }
    }
    Angle.prototype.sin = function () {
        return Math.sin(this.radians);
    };
    Angle.prototype.cos = function () {
        return Math.cos(this.radians);
    };
    Angle.prototype.tan = function () {
        return Math.tan(this.radians);
    };
    Angle.prototype.times = function (scale) {
        return new Angle({ radians: this.radians * (scale !== null && scale !== void 0 ? scale : 1) });
    };
    return Angle;
}());

function degrees(deg) {
    return new Angle({ degrees: deg });
}
function radians(rad) {
    return new Angle({ radians: rad });
}


/***/ }),

/***/ "./src/Rotation/Conversions.ts":
/*!*************************************!*\
  !*** ./src/Rotation/Conversions.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "eulerFromQuaternionX": () => (/* binding */ eulerFromQuaternionX),
/* harmony export */   "eulerFromRotationMatrix": () => (/* binding */ eulerFromRotationMatrix),
/* harmony export */   "fromRad": () => (/* binding */ fromRad),
/* harmony export */   "matrixFromEuler": () => (/* binding */ matrixFromEuler),
/* harmony export */   "quatFromEuler": () => (/* binding */ quatFromEuler),
/* harmony export */   "quaternionFromRotationMatrix": () => (/* binding */ quaternionFromRotationMatrix)
/* harmony export */ });
/* harmony import */ var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Math */ "./src/Math.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils */ "./src/Utils.ts");


var EPSILON = 1e-6; // rounding factor
function matrixFromEuler(euler) {
    var _z = (euler.alpha || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
    var _x = (euler.beta || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
    var _y = (euler.gamma || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
    var cX = Math.cos(_x);
    var cY = Math.cos(_y);
    var cZ = Math.cos(_z);
    var sX = Math.sin(_x);
    var sY = Math.sin(_y);
    var sZ = Math.sin(_z);
    //
    // ZXY-ordered rotation matrix construction.
    //
    var R = new Float32Array(9);
    R[0] = cZ * cY - sZ * sX * sY; // 1,1
    R[1] = -cX * sZ; // 1,2
    R[2] = cY * sZ * sX + cZ * sY; // 1,3
    R[3] = cY * sZ + cZ * sX * sY; // 2,1
    R[4] = cZ * cX; // 2,2
    R[5] = sZ * sY - cZ * cY * sX; // 2,3
    R[6] = -cX * sY; // 3,1
    R[7] = sX; // 3,2
    R[8] = cX * cY; // 3,3
    return R;
}
function eulerFromRotationMatrix(R) {
    // From Z-X-Y order
    // R[1]: -cos(beta)sin(alpha)
    // R[4]: cos(beta)cos(alpha)
    // R[6]: -cos(beta)sin(gamma)
    // R[7]: sin(beta)
    // R[8]: cos(beta)cos(gamma)
    var r8_zero = (0,_Math__WEBPACK_IMPORTED_MODULE_0__.abs)(R[8]) < 1e-7;
    var r6_zero = (0,_Math__WEBPACK_IMPORTED_MODULE_0__.abs)(R[6]) < 1e-7;
    // cos(gamma) >= 0 since gamma in [-pi/2, pi/2]
    // cos(beta) is < 0 exactly when R[8] < 0, or when R[8] = 0 and R[6] < 0
    var cos_beta_neg = (r8_zero && R[6] < 0) || R[8] < 0;
    if (r8_zero && r6_zero) {
        // gimbal lock discontinuity
        // gamma = 0 arbitrary but alpha depends on this choice
        return fromRad((0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(R[3], R[0]), (0,_Math__WEBPACK_IMPORTED_MODULE_0__.asin)(R[7]), 0);
    }
    else if (cos_beta_neg) {
        return fromRad((0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(R[1], -R[4]), -_Math__WEBPACK_IMPORTED_MODULE_0__.M_PI - (0,_Math__WEBPACK_IMPORTED_MODULE_0__.asin)(R[7]), (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(R[6], -R[8]));
    }
    else {
        return fromRad((0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(-R[1], R[4]), (0,_Math__WEBPACK_IMPORTED_MODULE_0__.asin)(R[7]), (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(-R[6], R[8]));
    }
}
function eulerFromQuaternionX(x, y, z, w) {
    var sqw = w * w;
    var sqx = x * x;
    var sqy = y * y;
    var sqz = z * z;
    // Normalised == 1, otherwise correction divisor.
    var unitLength = sqw + sqx + sqy + sqz;
    // If normalized:
    // wxyz:  0.5*sin(beta)
    var wxyz = w * x + y * z;
    // aX: cos(alpha)cos(beta)
    var aX = sqw - sqx + sqy - sqz;
    // aY: sin(alpha)cos(beta)
    var aY = 2 * (w * z - x * y);
    // gX: cos(gamma)cos(beta)
    var gX = sqw - sqx - sqy + sqz;
    // gY: sin(gamma)cos(beta)
    var gY = 2 * (w * y - x * z);
    // cos(gamma) always non-negative
    var sin_beta_is_1 = wxyz > (0.5 - EPSILON) * unitLength;
    var sin_beta_is_minus_1 = wxyz < (-0.5 + EPSILON) * unitLength;
    var cos_beta_is_zero = sin_beta_is_1 || sin_beta_is_minus_1;
    var gX_is_zero = (0,_Math__WEBPACK_IMPORTED_MODULE_0__.abs)(gX) < 1e-7;
    var cos_beta_not_pos = gX_is_zero || gX < 0;
    if (cos_beta_is_zero) {
        return fromRad(sin_beta_is_1 ? 2 * (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(y, w) : -2 * (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(y, w), -_Math__WEBPACK_IMPORTED_MODULE_0__.M_PI - (0,_Math__WEBPACK_IMPORTED_MODULE_0__.asin)((2 * wxyz) / unitLength), 0);
    }
    else {
        return fromRad(cos_beta_not_pos ? (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(-aY, -aX) : (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(aY, aX), cos_beta_not_pos
            ? -_Math__WEBPACK_IMPORTED_MODULE_0__.M_PI - (0,_Math__WEBPACK_IMPORTED_MODULE_0__.asin)((2 * wxyz) / unitLength)
            : (0,_Math__WEBPACK_IMPORTED_MODULE_0__.asin)((2 * wxyz) / unitLength), gX_is_zero ? -_Math__WEBPACK_IMPORTED_MODULE_0__.M_PI_2 : gX > 0 ? (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(gY, gX) : (0,_Math__WEBPACK_IMPORTED_MODULE_0__.atan2)(-gY, -gX));
    }
}
function quatFromEuler(euler) {
    var _z = ((euler === null || euler === void 0 ? void 0 : euler.alpha) || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
    var _x = ((euler === null || euler === void 0 ? void 0 : euler.beta) || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
    var _y = ((euler === null || euler === void 0 ? void 0 : euler.gamma) || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad;
    var cX = Math.cos(_x / 2);
    var cY = Math.cos(_y / 2);
    var cZ = Math.cos(_z / 2);
    var sX = Math.sin(_x / 2);
    var sY = Math.sin(_y / 2);
    var sZ = Math.sin(_z / 2);
    var x = sX * cY * cZ - cX * sY * sZ;
    var y = cX * sY * cZ + sX * cY * sZ;
    var z = cX * cY * sZ + sX * sY * cZ;
    var w = cX * cY * cZ - sX * sY * sZ;
    return { x: x, y: y, z: z, w: w };
}
function quaternionFromRotationMatrix(R) {
    return {
        x: 0.5 * Math.sqrt(1 + R[0] - R[4] - R[8]) * (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.sign)(R[7] - R[5]),
        y: 0.5 * Math.sqrt(1 - R[0] + R[4] - R[8]) * (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.sign)(R[2] - R[6]),
        z: 0.5 * Math.sqrt(1 - R[0] - R[4] + R[8]) * (0,_Utils__WEBPACK_IMPORTED_MODULE_1__.sign)(R[3] - R[1]),
        w: 0.5 * Math.sqrt(1 + R[0] + R[4] + R[8]), // w
    };
}
function fromRad(alphaRad, betaRad, gammaRad) {
    return {
        alpha: alphaRad * _Math__WEBPACK_IMPORTED_MODULE_0__.radToDeg,
        beta: betaRad * _Math__WEBPACK_IMPORTED_MODULE_0__.radToDeg,
        gamma: gammaRad * _Math__WEBPACK_IMPORTED_MODULE_0__.radToDeg,
    };
}


/***/ }),

/***/ "./src/Rotation/Euler.ts":
/*!*******************************!*\
  !*** ./src/Rotation/Euler.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "eulerFromAngleObject": () => (/* binding */ eulerFromAngleObject)
/* harmony export */ });
/* harmony import */ var _Conversions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Conversions */ "./src/Rotation/Conversions.ts");
/* harmony import */ var _RotationMatrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RotationMatrix */ "./src/Rotation/RotationMatrix.ts");
/* harmony import */ var _Quaternion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Quaternion */ "./src/Rotation/Quaternion.ts");



var EPSILON = 1e-6; // rounding factor
var Euler = /** @class */ (function () {
    function Euler(alpha, beta, gamma) {
        this.alpha = ensureInAlphaRange(alpha !== null && alpha !== void 0 ? alpha : 0);
        this.beta = ensureInBetaRange(beta !== null && beta !== void 0 ? beta : 0);
        this.gamma = ensureInGammaRange(gamma !== null && gamma !== void 0 ? gamma : 0);
    }
    Euler.prototype.rotateX = function (angle) {
        return this.rotateByAxisAngle([1, 0, 0], angle);
    };
    Euler.prototype.rotateY = function (angle) {
        return this.rotateByAxisAngle([0, 1, 0], angle);
    };
    Euler.prototype.rotateZ = function (angle) {
        return this.rotateByAxisAngle([0, 0, 1], angle);
    };
    Euler.prototype.rotateByAxisAngle = function (axis, angle) {
        return this.toMatrix().rotateByAxisAngle(axis, angle).toEuler();
    };
    Euler.prototype.toQuaternion = function () {
        var _a = (0,_Conversions__WEBPACK_IMPORTED_MODULE_0__.quatFromEuler)(this), x = _a.x, y = _a.y, z = _a.z, w = _a.w;
        return (0,_Quaternion__WEBPACK_IMPORTED_MODULE_2__.quaternion)(x, y, z, w).normalize();
    };
    Euler.prototype.toMatrix = function () {
        return (0,_RotationMatrix__WEBPACK_IMPORTED_MODULE_1__.rotationMatrix)((0,_Conversions__WEBPACK_IMPORTED_MODULE_0__.matrixFromEuler)(this)).normalize();
    };
    return Euler;
}());
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Euler);
function eulerFromAngleObject(obj) {
    return new Euler(obj.alpha, obj.beta, obj.gamma);
}
function ensureInAlphaRange(alpha) {
    while (alpha < 0)
        alpha += 360;
    return alpha % 360;
}
function ensureInBetaRange(beta) {
    while (beta < -180)
        beta += 360;
    return beta % 360;
}
function ensureInGammaRange(gamma) {
    if (gamma < -90 || gamma > 90)
        throw new Error("Incorrect gamma range. It was ".concat(gamma, " but should be between -90 and 90."));
    return gamma;
}


/***/ }),

/***/ "./src/Rotation/Quaternion.ts":
/*!************************************!*\
  !*** ./src/Rotation/Quaternion.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "quaternion": () => (/* binding */ quaternion),
/* harmony export */   "quaternionForRotation": () => (/* binding */ quaternionForRotation)
/* harmony export */ });
/* harmony import */ var _Euler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Euler */ "./src/Rotation/Euler.ts");
/* harmony import */ var _Conversions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conversions */ "./src/Rotation/Conversions.ts");


var QuaternionClass = /** @class */ (function () {
    function QuaternionClass(x, y, z, w) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }
    QuaternionClass.prototype.multipliedWith = function (quat) {
        return multiplyQuaternions(this, quat);
    };
    QuaternionClass.prototype.rotateX = function (angle) {
        return this.rotateByAxisAngle([1, 0, 0], angle);
    };
    QuaternionClass.prototype.rotateY = function (angle) {
        return this.rotateByAxisAngle([0, 1, 0], angle);
    };
    QuaternionClass.prototype.rotateZ = function (angle) {
        return this.rotateByAxisAngle([0, 0, 1], angle);
    };
    QuaternionClass.prototype.toEuler = function () {
        return (0,_Euler__WEBPACK_IMPORTED_MODULE_0__.eulerFromAngleObject)((0,_Conversions__WEBPACK_IMPORTED_MODULE_1__.eulerFromQuaternionX)(this.x, this.y, this.z, this.w));
    };
    QuaternionClass.prototype.normalize = function () {
        var len = this.length();
        if (len === 0) {
            throw new Error("Cannot normalize zero quaternion");
        }
        this.x /= len;
        this.y /= len;
        this.z /= len;
        this.w /= len;
        return this;
    };
    QuaternionClass.prototype.length = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    };
    QuaternionClass.prototype.rotateByAxisAngle = function (axis, angle) {
        return multiplyQuaternions(this, quaternionForRotation(axis, angle)).normalize();
    };
    return QuaternionClass;
}());
var multiplyQuaternions = function (a, b) {
    return quaternion(a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y, // x
    a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z, // y
    a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x, // z
    a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z // w
    );
};
function quaternionForRotation(axis, angle) {
    var _a, _b, _c;
    var halfAngle = angle.times(1 / 2);
    var sA = halfAngle.sin();
    var cA = halfAngle.cos();
    return quaternion(((_a = axis[0]) !== null && _a !== void 0 ? _a : 0) * sA, ((_b = axis[1]) !== null && _b !== void 0 ? _b : 0) * sA, ((_c = axis[2]) !== null && _c !== void 0 ? _c : 0) * sA, cA // w
    );
}
function quaternion(x, y, z, w) {
    return new QuaternionClass(x, y, z, w);
}


/***/ }),

/***/ "./src/Rotation/RotationMatrix.ts":
/*!****************************************!*\
  !*** ./src/Rotation/RotationMatrix.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "identityMatrix": () => (/* binding */ identityMatrix),
/* harmony export */   "matrixForRotation": () => (/* binding */ matrixForRotation),
/* harmony export */   "matrixFromQuaternion": () => (/* binding */ matrixFromQuaternion),
/* harmony export */   "rotationMatrix": () => (/* binding */ rotationMatrix)
/* harmony export */ });
/* harmony import */ var _Euler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Euler */ "./src/Rotation/Euler.ts");
/* harmony import */ var _Conversions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Conversions */ "./src/Rotation/Conversions.ts");
/* harmony import */ var _Quaternion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Quaternion */ "./src/Rotation/Quaternion.ts");



var RotationMatrixClass = /** @class */ (function () {
    function RotationMatrixClass(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
        this.elements = new Float32Array(9);
        if (m11 instanceof Float32Array || m11 instanceof Array) {
            this.elements.set(m11);
        }
        else {
            this.elements[0] = m11;
            this.elements[1] = m12;
            this.elements[2] = m13;
            this.elements[3] = m21;
            this.elements[4] = m22;
            this.elements[5] = m23;
            this.elements[6] = m31;
            this.elements[7] = m32;
            this.elements[8] = m33;
        }
    }
    RotationMatrixClass.prototype.multipliedBy = function (m) {
        return multiplyMatrices(this, m);
    };
    RotationMatrixClass.prototype.rotateX = function (angle) {
        return this.rotateByAxisAngle([1, 0, 0], angle);
    };
    RotationMatrixClass.prototype.rotateY = function (angle) {
        return this.rotateByAxisAngle([0, 1, 0], angle);
    };
    RotationMatrixClass.prototype.rotateZ = function (angle) {
        return this.rotateByAxisAngle([0, 0, 1], angle);
    };
    RotationMatrixClass.prototype.rotateByAxisAngle = function (axis, angle) {
        return this.multipliedBy(matrixForRotation(axis, angle)).normalize();
    };
    RotationMatrixClass.prototype.normalize = function () {
        var determinant = this.determinant();
        // Normalize matrix values
        this.elements[0] /= determinant;
        this.elements[1] /= determinant;
        this.elements[2] /= determinant;
        this.elements[3] /= determinant;
        this.elements[4] /= determinant;
        this.elements[5] /= determinant;
        this.elements[6] /= determinant;
        this.elements[7] /= determinant;
        this.elements[8] /= determinant;
        return this;
    };
    RotationMatrixClass.prototype.determinant = function () {
        var R = this.elements;
        return (R[0] * R[4] * R[8] -
            R[0] * R[5] * R[7] -
            R[1] * R[3] * R[8] +
            R[1] * R[5] * R[6] +
            R[2] * R[3] * R[7] -
            R[2] * R[4] * R[6]);
    };
    RotationMatrixClass.prototype.toEuler = function () {
        return (0,_Euler__WEBPACK_IMPORTED_MODULE_0__.eulerFromAngleObject)((0,_Conversions__WEBPACK_IMPORTED_MODULE_1__.eulerFromRotationMatrix)(this.elements));
    };
    RotationMatrixClass.prototype.toQuaternion = function () {
        var _a = (0,_Conversions__WEBPACK_IMPORTED_MODULE_1__.quaternionFromRotationMatrix)(this.elements), x = _a.x, y = _a.y, z = _a.z, w = _a.w;
        return (0,_Quaternion__WEBPACK_IMPORTED_MODULE_2__.quaternion)(x, y, z, w);
    };
    return RotationMatrixClass;
}());
function multiplyMatrices(a, b) {
    var aE = a.elements;
    var bE = b.elements;
    return new RotationMatrixClass(aE[0] * bE[0] + aE[1] * bE[3] + aE[2] * bE[6], aE[0] * bE[1] + aE[1] * bE[4] + aE[2] * bE[7], aE[0] * bE[2] + aE[1] * bE[5] + aE[2] * bE[8], aE[3] * bE[0] + aE[4] * bE[3] + aE[5] * bE[6], aE[3] * bE[1] + aE[4] * bE[4] + aE[5] * bE[7], aE[3] * bE[2] + aE[4] * bE[5] + aE[5] * bE[8], aE[6] * bE[0] + aE[7] * bE[3] + aE[8] * bE[6], aE[6] * bE[1] + aE[7] * bE[4] + aE[8] * bE[7], aE[6] * bE[2] + aE[7] * bE[5] + aE[8] * bE[8]);
}
function identityMatrix() {
    return new RotationMatrixClass(1, 0, 0, 0, 1, 0, 0, 0, 1);
}
function matrixForRotation(axis, angle) {
    var x = axis[0], y = axis[1], z = axis[2];
    var sA = angle.sin();
    var cA = angle.cos();
    return new RotationMatrixClass(cA + x * x * (1 - cA), x * y * (1 - cA) - z * sA, x * z * (1 - cA) + y * sA, x * y * (1 - cA) + z * sA, cA + y * y * (1 - cA), y * z * (1 - cA) - x * sA, x * z * (1 - cA) - y * sA, y * z * (1 - cA) + x * sA, cA + z * z * (1 - cA));
}
function matrixFromQuaternion(q) {
    var sqw = q.w * q.w;
    var sqx = q.x * q.x;
    var sqy = q.y * q.y;
    var sqz = q.z * q.z;
    return new RotationMatrixClass(sqw + sqx - sqy - sqz, // 1,1
    2 * (q.x * q.y - q.w * q.z), // 1,2
    2 * (q.x * q.z + q.w * q.y), // 1,3
    2 * (q.x * q.y + q.w * q.z), // 2,1
    sqw - sqx + sqy - sqz, // 2,2
    2 * (q.y * q.z - q.w * q.x), // 2,3
    2 * (q.x * q.z - q.w * q.y), // 3,1
    2 * (q.y * q.z + q.w * q.x), // 3,2
    sqw - sqx - sqy + sqz // 3,3
    );
}
function rotationMatrix(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    return new RotationMatrixClass(m11, m12, m13, m21, m22, m23, m31, m32, m33);
}


/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SensorCheck": () => (/* binding */ SensorCheck),
/* harmony export */   "sign": () => (/* binding */ sign)
/* harmony export */ });
// Math.sign polyfill
function sign(x) {
    x = +x; // convert to a number
    if (x === 0 || isNaN(x))
        return x;
    return x > 0 ? 1 : -1;
}
///// Promise-based Sensor Data checker //////
// TODO: Understand what this does
function SensorCheck(sensorRootObj) {
    var promise = new Promise(function (resolve, reject) {
        var runCheck = function (tries) {
            setTimeout(function () {
                if (sensorRootObj && sensorRootObj.data) {
                    resolve();
                }
                else if (tries >= 20) {
                    reject();
                }
                else {
                    runCheck(++tries);
                }
            }, 50);
        };
        runCheck(0);
    });
    return promise;
}


/***/ }),

/***/ "./src/WindowConstants.ts":
/*!********************************!*\
  !*** ./src/WindowConstants.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SCREEN_ROTATION_0": () => (/* binding */ SCREEN_ROTATION_0),
/* harmony export */   "SCREEN_ROTATION_180": () => (/* binding */ SCREEN_ROTATION_180),
/* harmony export */   "SCREEN_ROTATION_270": () => (/* binding */ SCREEN_ROTATION_270),
/* harmony export */   "SCREEN_ROTATION_90": () => (/* binding */ SCREEN_ROTATION_90),
/* harmony export */   "SCREEN_ROTATION_MINUS_90": () => (/* binding */ SCREEN_ROTATION_MINUS_90),
/* harmony export */   "hasScreenOrientationAPI": () => (/* binding */ hasScreenOrientationAPI),
/* harmony export */   "screenActive": () => (/* binding */ screenActive),
/* harmony export */   "screenOrientation": () => (/* binding */ screenOrientation)
/* harmony export */ });
/* harmony import */ var _Math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math */ "./src/Math.ts");

var screenActive = false;
// Internal screen orientation variables
var hasScreenOrientationAPI = window &&
    window.screen &&
    window.screen.orientation &&
    window.screen.orientation.angle !== undefined &&
    window.screen.orientation.angle !== null
    ? true
    : false;
var screenOrientation = {
    angle: (hasScreenOrientationAPI
        ? window.screen.orientation.angle
        : window.orientation || 0) * _Math__WEBPACK_IMPORTED_MODULE_0__.degToRad,
};
var SCREEN_ROTATION_0 = 0, SCREEN_ROTATION_90 = _Math__WEBPACK_IMPORTED_MODULE_0__.M_PI_2, SCREEN_ROTATION_180 = _Math__WEBPACK_IMPORTED_MODULE_0__.M_PI, SCREEN_ROTATION_270 = _Math__WEBPACK_IMPORTED_MODULE_0__.M_2_PI / 3, SCREEN_ROTATION_MINUS_90 = -_Math__WEBPACK_IMPORTED_MODULE_0__.M_PI_2;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*********************!*\
  !*** ./src/Core.ts ***!
  \*********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Events */ "./src/Events.ts");
/* harmony import */ var _DeviceMotion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DeviceMotion */ "./src/DeviceMotion.ts");
/* harmony import */ var _DeviceOrientation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DeviceOrientation */ "./src/DeviceOrientation.ts");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");
///// FULLTILT API Root Object /////




var FULLTILT = {
    version: "0.5.3",
    getDeviceOrientation: function (options) {
        var promise = new Promise(function (resolve, reject) {
            var control = new _DeviceOrientation__WEBPACK_IMPORTED_MODULE_2__["default"](options);
            control.start();
            var orientationSensorCheck = (0,_Utils__WEBPACK_IMPORTED_MODULE_3__.SensorCheck)(_Events__WEBPACK_IMPORTED_MODULE_0__.sensors.orientation);
            orientationSensorCheck
                .then(function () {
                resolve(control);
            })
                .catch(function () {
                control.stop();
                reject("DeviceOrientation is not supported");
            });
        });
        return promise;
    },
    getDeviceMotion: function (options) {
        var promise = new Promise(function (resolve, reject) {
            var control = new _DeviceMotion__WEBPACK_IMPORTED_MODULE_1__.DeviceMotion(options);
            control.start();
            var motionSensorCheck = (0,_Utils__WEBPACK_IMPORTED_MODULE_3__.SensorCheck)(_Events__WEBPACK_IMPORTED_MODULE_0__.sensors.motion);
            motionSensorCheck
                .then(function () {
                resolve(control);
            })
                .catch(function () {
                control.stop();
                reject("DeviceMotion is not supported");
            });
        });
        return promise;
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FULLTILT);

})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,